name: "On Release"

on:
  push:
    # Publish `1.2.3` tags as releases.
    tags:
      - "*"

  # Allow to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  release_amd64:
    runs-on: ubuntu-latest
    container:
      image: crystallang/crystal:latest-alpine
    steps:
      - uses: actions/checkout@v2
      - name: Build the kadalu binary
        run: |
            apk add --update --no-cache --force-overwrite sqlite-dev sqlite-static
            cd mgr
            VERSION="${{ github.ref_name }}" shards build --production --release --static --stats --time
      - name: Rename kadalu to kadalu-amd64
        run: |
          mv mgr/bin/kadalu mgr/bin/kadalu-amd64
      - name: Upload kadalu-amd64 to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: mgr/bin/kadalu-amd64
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
  release_arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Pull images
        run: |
          docker pull multiarch/qemu-user-static
      - name: Install QEMU
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build
        working-directory: .
        run: |
          docker run -i -v `pwd`:/workspace -w /workspace --rm multiarch/alpine:aarch64-edge /bin/sh -c "echo '@edge http://dl-cdn.alpinelinux.org/alpine/edge/community' >>/etc/apk/repositories; apk add --update --no-cache --force-overwrite llvm12-dev llvm12-static crystal@edge gc-dev gcc gmp-dev libatomic_ops libevent-static musl-dev pcre-dev libxml2-dev openssl-dev openssl-libs-static tzdata yaml-dev zlib-static make git g++ shards@edge yaml-static sqlite-dev sqlite-static; cd mgr; VERSION="${{ github.ref_name }}" shards build --production --release --static --stats --time"
      - name: Rename kadalu to kadalu-amd64
        run: |
          sudo mv mgr/bin/kadalu mgr/bin/kadalu-arm64
      - name: Upload kadalu-arm64 to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: mgr/bin/kadalu-arm64
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  upload_release_files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Upload kadalu-mgr.service to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: extra/*.service
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Upload mount.kadalu script to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: extra/mount.kadalu
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Upload install.sh script to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: extra/install.sh
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  upload_deb_files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      # TODO: Review the below list of dependencies
      - name: Install the Build dependencies
        run: |
          sudo apt update -y
          sudo apt install -y --no-install-recommends python3 libtirpc3 init     \
          python3-pip ssh rsync lvm2 less software-properties-common             \
          sudo curl wget git build-essential automake autoconf automake libtool  \
          flex bison libssl-dev pkg-config uuid-dev acl-dev zlib1g-dev           \
          libxml2-dev libxml2-utils liburcu-dev xfsprogs gdb attr                \
          libgoogle-perftools-dev zfsutils-linux screen libsqlite3-dev sqlite3   \
          debmake python3-debian debhelper dh-python                             \
          dh-systemd libaio-dev libdb-dev libfuse-dev libibverbs-dev liblvm2-dev \
          libncurses5-dev librdmacm-dev libreadline-dev python3-all-dev
      - name: Install Crystal
        run: |
          curl -fsSL https://crystal-lang.org/install.sh | sudo bash
      - name: Build Debian packages
        run: |
          VERSION="${{ github.ref_name }}" ./generate_deb_packages.sh
      - name: Upload deb packages and meta files to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
